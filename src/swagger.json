{
	"components": {
		"examples": {},
		"headers": {},
		"parameters": {},
		"requestBodies": {},
		"responses": {},
		"schemas": {
			"Pick_User.email-or-id_": {
				"properties": {
					"email": {
						"type": "string"
					},
					"id": {
						"type": "string"
					}
				},
				"required": [
					"email",
					"id"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"IAuthPayload": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"accessToken": {
						"type": "string",
						"nullable": true
					},
					"user": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Pick_User.email-or-id_"
							}
						],
						"nullable": true
					}
				},
				"required": [
					"success",
					"accessToken",
					"user"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ISignInInput": {
				"properties": {
					"email": {
						"type": "string"
					},
					"password": {
						"type": "string"
					}
				},
				"required": [
					"email",
					"password"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ISignUpInput": {
				"properties": {
					"email": {
						"type": "string"
					},
					"password": {
						"type": "string"
					},
					"name": {
						"type": "string"
					}
				},
				"required": [
					"email",
					"password",
					"name"
				],
				"type": "object",
				"additionalProperties": false
			},
			"IVerifyPasswordResetToken": {
				"properties": {
					"token": {
						"type": "string"
					},
					"email": {
						"type": "string"
					}
				},
				"required": [
					"token",
					"email"
				],
				"type": "object",
				"additionalProperties": false
			},
			"IResetPasswordInput": {
				"properties": {
					"email": {
						"type": "string"
					},
					"password": {
						"type": "string"
					},
					"password2": {
						"type": "string"
					},
					"token": {
						"type": "string"
					}
				},
				"required": [
					"email",
					"password",
					"password2",
					"token"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Pick_User.Exclude_keyofUser.passwordHash__": {
				"properties": {
					"email": {
						"type": "string"
					},
					"id": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"verified": {
						"type": "boolean"
					},
					"createdAt": {
						"type": "string",
						"format": "date-time"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time"
					}
				},
				"required": [
					"email",
					"id",
					"name",
					"verified",
					"createdAt",
					"updatedAt"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_User.passwordHash_": {
				"$ref": "#/components/schemas/Pick_User.Exclude_keyofUser.passwordHash__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"User": {
				"properties": {
					"updatedAt": {
						"type": "string",
						"format": "date-time"
					},
					"createdAt": {
						"type": "string",
						"format": "date-time"
					},
					"verified": {
						"type": "boolean"
					},
					"passwordHash": {
						"type": "string"
					},
					"email": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"id": {
						"type": "string"
					}
				},
				"required": [
					"updatedAt",
					"createdAt",
					"verified",
					"passwordHash",
					"email",
					"name",
					"id"
				],
				"type": "object",
				"description": "Model User"
			},
			"IUpdateUserInput": {
				"properties": {
					"name": {
						"type": "string"
					},
					"email": {
						"type": "string"
					}
				},
				"required": [
					"name",
					"email"
				],
				"type": "object",
				"additionalProperties": false
			}
		},
		"securitySchemes": {
			"jwt": {
				"type": "apiKey",
				"name": "auth-token",
				"in": "header",
				"description": "The authorization token"
			}
		}
	},
	"info": {
		"title": "express-ts-boilerplate",
		"version": "1.0.0",
		"description": "Express TypeScript PostgreSQL boilerplate with Prisma",
		"license": {
			"name": "MIT"
		},
		"contact": {
			"name": "Joseph Odunsi"
		}
	},
	"openapi": "3.0.0",
	"paths": {
		"/auth/login": {
			"post": {
				"operationId": "Login",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IAuthPayload"
								}
							}
						}
					}
				},
				"description": "Login route",
				"tags": [
					"Auth"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ISignInInput"
							}
						}
					}
				}
			}
		},
		"/auth/signup": {
			"post": {
				"operationId": "Register",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IAuthPayload"
								}
							}
						}
					}
				},
				"description": "Signup route",
				"tags": [
					"Auth"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ISignUpInput"
							}
						}
					}
				}
			}
		},
		"/auth/forgot-password": {
			"post": {
				"operationId": "ForgotPassword",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"success": {
											"type": "boolean"
										}
									},
									"required": [
										"success"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Forgot password route. An email will be sent to the user with a link to reset his password.",
				"tags": [
					"Auth"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"email": {
										"type": "string"
									}
								},
								"required": [
									"email"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/auth/verify-password-reset-token": {
			"post": {
				"operationId": "VerifyPasswordResetToken",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"success": {
											"type": "boolean"
										}
									},
									"required": [
										"success"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Verify password reset token.\r\nConfirm if the reset token is valid before changing the password.",
				"tags": [
					"Auth"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/IVerifyPasswordResetToken"
							}
						}
					}
				}
			}
		},
		"/auth/reset-password": {
			"post": {
				"operationId": "ResetPassword",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"success": {
											"type": "boolean"
										}
									},
									"required": [
										"success"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Reset password. This route is only accessible to the user who has a valid reset token.\r\nThe user will be able to change his password.",
				"tags": [
					"Auth"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/IResetPasswordInput"
							}
						}
					}
				}
			}
		},
		"/auth/request-verification-mail": {
			"post": {
				"operationId": "RequestVerificationMail",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"success": {
											"type": "boolean"
										}
									},
									"required": [
										"success"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Send a verification email to the user after signup.\r\nUser can also request a new verification email.\r\nAn email will be sent to the user with a link to confirm his email.",
				"tags": [
					"Auth"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"email": {
										"type": "string"
									}
								},
								"required": [
									"email"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/auth/confirm-email": {
			"post": {
				"operationId": "ConfirmEmail",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"success": {
											"type": "boolean"
										}
									},
									"required": [
										"success"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Confirm user email. Check if the user has a valid token and confirm his email.",
				"tags": [
					"Auth"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/IVerifyPasswordResetToken"
							}
						}
					}
				}
			}
		},
		"/auth/me": {
			"post": {
				"operationId": "Me",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Omit_User.passwordHash_"
								}
							}
						}
					}
				},
				"description": "Get the current user.",
				"tags": [
					"Auth"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": []
			}
		},
		"/users": {
			"get": {
				"operationId": "GetAll",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/User"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"description": "Get all users",
				"tags": [
					"User"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": []
			}
		},
		"/users/{id}": {
			"get": {
				"operationId": "GetUserById",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/User"
										}
									],
									"nullable": true
								}
							}
						}
					}
				},
				"description": "Retrieve a user by id. Only the user himself can retrieve his own information.",
				"tags": [
					"User"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Id of the user",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"put": {
				"operationId": "UpdateUser",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/User"
								}
							}
						}
					}
				},
				"description": "Update user's information. Only the user himself can update his own information.",
				"tags": [
					"User"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Id of the user",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/IUpdateUserInput"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "DeleteUser",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/User"
										}
									],
									"nullable": true
								}
							}
						}
					}
				},
				"description": "Delete a user by id. Only the user himself can delete his own account.",
				"tags": [
					"User"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Id of the user",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		}
	},
	"servers": [
		{
			"url": "http://localhost:7000/api"
		}
	]
}